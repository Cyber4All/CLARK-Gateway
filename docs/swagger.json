{
  "openapi": "3.0.0",
  "info": {
    "title": "CLARK Gateway",
    "version": "3.7.6",
    "description": "The API gateway for all of the CLARK microservices",
    "license": { "name": "ISC", "url": "https://www.isc.org/licenses/" },
    "contact": {
      "name": "SecurEd Inc.",
      "url": "https://secured.team/",
      "email": "info@secured.team"
    },
    "x-logo": {
      "url": "https://clark.center/assets/images/logo.png",
      "altText": "CLARK Logo"
    },
    "x-tagGroups": [
      { "name": "Library Service", "tags": ["Library Service"] },
      { "name": "Notification Service", "tags": ["Notification Service"] },
      { "name": "Feature Service", "tags": ["Feature Service"] },
      { "name": "Rating Service", "tags": ["Rating Service"] },
      { "name": "Outcome Service", "tags": ["Outcome Service"] },
      {
        "name": "Learning Object Service",
        "tags": ["Learning Object Service"]
      },
      { "name": "User Service", "tags": ["User Service"] },
      { "name": "Utility Service", "tags": ["Utility Service"] },
      {
        "name": "Standard Guideline Service",
        "tags": ["Standard Guideline Service"]
      }
    ]
  },
  "servers": [
    { "url": "http://localhost:3001", "description": "Development" },
    { "url": "https://api-gateway.clark.center", "description": "Production" }
  ],
  "paths": {
    "/featured/learning-objects": {
      "get": {
        "description": "Gets a list of featured objects",
        "tags": ["Feature Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LearningObject" }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the list of featured objects",
        "tags": ["Feature Service"],
        "requestBody": {
          "description": "The cuid, version, and author's username",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/LearningObject" }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Learning Objects Updated"
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have privilege to update featured objects"
          }
        }
      }
    },
    "/featured/learning-objects/:collection": {
      "get": {
        "description": "Gets the list of featured learning objects for a collection",
        "tags": ["Feature Service"],
        "responses": {
          "200": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LearningObject" }
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - At least one of the learning objects is not from the desired featured collection"
          },
          "404": {
            "description": "NOT FOUND - The desired collection does not exist"
          }
        }
      }
    },
    "/learning-objects/{id}/status": {},
    "patch": {
      "description": "Change hierarchy status",
      "tags": ["Hierarchy Service"],
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": { "type": "string" },
          "required": true,
          "description": "the id of the learning object"
        }
      ],
      "requestBody": {
        "description": "The cuid, version, and author's username",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "the status to change too",
                  "required": true,
                  "example": "released"
                },
                "collection": {
                  "type": "string",
                  "description": "the collection of the learing object, only used for submitting an object for review",
                  "required": false,
                  "example": "nccp"
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": { "description": "OK" },
        "400": {
          "description": "INVALID - Incorrect object status or id is not a mongo object id"
        },
        "401": { "description": "UNAUTHENTICATED - User not logged in" },
        "403": {
          "description": "UNAUTHORIZED - User is not author (unreleased -> waiting) or privileged access group (other status moves)"
        },
        "404": { "description": "NOT FOUND - \tLearning object not found" }
      }
    },
    "/users/{userId}/learning-objects/{cuid}/changelog": {
      "post": {
        "description": "Creates a changelog",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the learning object"
          }
        ],
        "requestBody": {
          "description": "The cuid, version, and author's username",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "changelogText": {
                    "type": "string",
                    "description": "This is the text of the changelog",
                    "required": true,
                    "example": "This is an example"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not a admin or editor"
          },
          "404": {
            "description": "NOT FOUND - Learning object or user not found"
          }
        }
      }
    },
    "/users/{userId}/learning-objects/{cuid}/changelogs": {
      "get": {
        "description": "Gets a changelog for a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the learning object"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Changelog"
                }
              }
            }
          }
        }
      }
    },
    "/{collection}/metrics": {
      "get": {
        "description": "Gets a collection's metrics",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "schema": { "type": "string" },
            "required": true,
            "description": "The name of the collection"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionMetricBody"
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVICE ERROR - Collection not found"
          }
        }
      }
    },
    "/collections/{name}/meta": {
      "get": {
        "description": "Gets a collection's meta data",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": { "type": "string" },
            "required": true,
            "description": "The name of the collection"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Collection" }
              }
            }
          },
          "404": { "description": "NOT FOUND - Collection not found" }
        }
      }
    },
    "/collections": {
      "get": {
        "description": "Gets a list of collections",
        "tags": ["Learning Object Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "nccp",
                        "required": true,
                        "description": "The collection name"
                      },
                      "abvName": {
                        "type": "string",
                        "example": "nccp",
                        "required": true,
                        "description": "The collection's abbreviated name"
                      },
                      "hasLogo": {
                        "type": "boolean",
                        "example": true,
                        "required": true,
                        "description": "True if the collection has a logo"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/learning-objects/{learningObjectId}/collections": {
      "patch": {
        "description": "Adds object to collection",
        "tags": ["Learning Object Service"],
        "requestBody": {
          "description": "The collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collection": {
                    "type": "string",
                    "example": "nccp",
                    "description": "The collection name",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" }
        }
      }
    },
    "/users/{username}/learning-objects/{cuid}/collection": {
      "patch": {
        "description": "Updates a in review object's collection",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          }
        ],
        "requestBody": {
          "description": "The collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collection": {
                    "type": "string",
                    "example": "nccp",
                    "description": "The collection name",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Collection not defined in request body"
          },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not an admin or editor"
          },
          "404": {
            "description": "NOT FOUND - Learning object or collection not found"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/bundle": {
      "get": {
        "description": "Download object's zip from S3",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object to download"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Downloads a zip file",
            "content": {
              "application/zip": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          },
          "401": {
            "description": "UNAUTHENTICATED - Invalid access. You must have a valid token to access this resource."
          },
          "403": {
            "description": "UNAUTHORIZED - User {username} does not have access to download the requested Learning Object"
          },
          "404": {
            "description": "NOT FOUND - Author of learning object not found, Learning Object not found"
          },
          "425": { "description": null }
        }
      },
      "post": {
        "description": "Bundles a learning object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object to bundle"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Creates Bundling Document and Initializes a CloudWatch event"
          },
          "401": {
            "description": "UNAUTHENTICATED - Invalid access. You must have a valid token to access this resource."
          },
          "403": {
            "description": "UNAUTHORIZED - User {username} does not have access to download the requested Learning Object"
          },
          "404": {
            "description": "NOT FOUND - Author of learning object not found, Learning Object not found"
          },
          "500": {
            "description": "SERVICE ERROR - CloudWatchEvents Client Error"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{learningObjectId}/materials/files/{fileId}": {
      "patch": {
        "description": "Updates a file metadata",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          },
          {
            "in": "path",
            "name": "fileId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The file's id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "Object",
                "description": "A partial object of type FileMetadata",
                "$ref": "#/components/schemas/FileMetadata"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "NO CONTENT" },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have permission to update the file"
          },
          "404": { "description": "NOT FOUND - Object or file not found" }
        }
      },
      "delete": {
        "description": "Deletes a file from a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          },
          {
            "in": "path",
            "name": "fileId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The file's id"
          }
        ],
        "responses": {
          "204": { "description": "NO CONTENT" },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have permission to delete the file"
          },
          "404": { "description": "NOT FOUND - Object or file not found" }
        }
      }
    },
    "/learning-objects/{id}/pdf": {
      "patch": {
        "description": "Update a object's README pdf",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have permission to update the README"
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/files/{fileId}/download": {
      "get": {
        "description": "Downloads a file",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          },
          {
            "in": "path",
            "name": "fileId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The file's id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Downloads a file",
            "content": {
              "application/octet-stream": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access an in review object as a unprivileged user"
          },
          "404": { "description": "NOT FOUND - Object or file not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/materials": {
      "get": {
        "description": "Gets an object's materials",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/File" },
                    { "$ref": "#/components/schemas/PDF" },
                    { "$ref": "#/components/schemas/Url" },
                    { "$ref": "#/components/schemas/FolderDescription" }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHENTICATED - User is not logged in and trying to access a in review object"
          },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access an in review object as a unprivileged user"
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/materials/files": {
      "post": {
        "description": "Adds file meta data to a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileMeta": {
                    "type": "array",
                    "items": { "$ref": "#/components/schemas/FileMetadata" }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/FileMetadata" }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access an in review object as a unprivileged user"
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/files/bundle": {
      "patch": {
        "description": "Toggles a file to be included/excluded in a bundle",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "the username of the author"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "the learning object ID of the files to be bundled"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "selected": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/File/properties/id"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK, files selected/deselected successfully from the bundle"
          },
          "400": {
            "description": "BAD REQUEST - A File ID appears in both selected and deselected arrays or a file ID is an invalid mongo ID"
          },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not an admin or an editor"
          },
          "404": { "description": "NOT FOUND - File(s) not found in database" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}": {
      "get": {
        "description": "Gets a object by cuid",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object's cuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LearningObject" }
              }
            }
          },
          "401": {
            "description": "UNAUTHENTICATED - User not logged in and trying to access in review/unreleased object"
          },
          "403": {
            "description": "UNAUTHORIZED - User is not the author and trying to access a unreleased object or is not privileged and trying to access a in review object"
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      },
      "patch": {
        "description": "Updates a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object's cuid"
          }
        ],
        "requestbody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LearningObject" }
            }
          }
        },
        "responses": {
          "204": { "description": "NO CONTENT" },
          "400": { "description": "BAD REQUEST - Object does not exist" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not author making changes to unreleased object or not privileged user making changes to released/in review object"
          }
        }
      },
      "delete": {
        "description": "Deletes a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object's cuid"
          }
        ],
        "responses": {
          "204": { "description": "NO CONTENT" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not object author deleting unreleased object"
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/children": {
      "get": {
        "description": "Gets the children of a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object's cuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LearningObject" }
                }
              }
            }
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/parents": {
      "get": {
        "description": "Gets a object's parents",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object's cuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LearningObject" }
                }
              }
            }
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      }
    },
    "/learning-objects/{username}/{learningObjectName}/children": {
      "post": {
        "description": "Sets the children of a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's username"
          },
          {
            "in": "path",
            "name": "learningObjectName",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object's id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "children": {
                    "type": "array",
                    "description": "An array of object ids"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not object author and object is unreleased or user is not privileged"
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      },
      "patch": {
        "description": "Removes a child of a particular object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's username"
          },
          {
            "in": "path",
            "name": "learningObjectName",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object's id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the child to remove"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not object author and object is unreleased or user is not privileged"
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      }
    },
    "/learning-objects/{username}/hierarchy-object": {
      "post": {
        "description": "Creates a learning object for a hierarchy",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's username"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the learning object"
                  },
                  "length": {
                    "type": "string",
                    "description": "The length of the learning object"
                  },
                  "collection": {
                    "type": "string",
                    "description": "The collection the learning object needs to be added to"
                  },
                  "contributors": {
                    "type": "string",
                    "description": "The ids of the contributors of the learning object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD_REQUEST - Object name is not more than 2 characters, length is not valid, or status is not valid"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not object author, admin, or editor"
          }
        }
      }
    },
    "/users/{username}/learning-objects": {
      "get": {
        "description": "Searches a user's objects",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The author's username"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LearningObject" }
                }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User try to access another author's unreleased objects"
          },
          "404": { "description": "NOT FOUND - User not found" }
        }
      },
      "post": {
        "description": "Creates a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The author's username"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LearningObject" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LearningObject" }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User try to access another author's objects"
          },
          "409": {
            "description": "CONFLICT - Object with same name exists under the same author"
          }
        }
      }
    },
    "/users/{username}/learning-objects/profile": {
      "get": {
        "description": "Gets a author's objects",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The author's username"
          }
        ],
        "responses": {
          "301": {
            "description": "MOVED PERMENENTLY - Redirects to GET /users/:username/learning-objects"
          }
        }
      }
    },
    "/learning-objects/multiple/{names}": {
      "delete": {
        "description": "Deletes multiple objects",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "names",
            "schema": { "type": "string" },
            "required": true,
            "description": "The ids of the learning objects to delete, separated by commas"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not author or is trying to delete a in review/released object"
          }
        }
      }
    },
    "/learning-objects": {
      "get": {
        "description": "Gets learning objects",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "number" },
            "required": true,
            "description": "The current page"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "number" },
            "required": true,
            "description": "The object return limit"
          },
          {
            "in": "query",
            "name": "text",
            "schema": { "type": "string" },
            "required": true,
            "description": "The query to search for"
          },
          {
            "in": "query",
            "name": "assigned",
            "schema": { "type": "string" },
            "required": false,
            "description": "Boolean to determine if only the objects that were assigned to them should be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "example": 200,
                      "required": true,
                      "description": "The total number of objects"
                    },
                    "objects": {
                      "type": "array",
                      "required": true,
                      "description": "The array of objects",
                      "items": { "$ref": "#/components/schemas/LearningObject" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/learning-objects/{learningObjectId}": {
      "get": {
        "description": "Gets a learning object by id",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LearningObject" }
              }
            }
          },
          "401": {
            "description": "UNAUTHENTICATED - User not logged in and trying to access a non-released object"
          },
          "403": {
            "description": "UNAUTHORIZED - User is not author trying to access a unreleased object or unprivileged user trying to access in review object"
          },
          "404": { "description": "NOT FOUND - Object is not found" }
        }
      }
    },
    "/learning-objects/{id}/children/summary": {
      "get": {
        "description": "Gets an object's children's summaries",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/LearningObject" }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHENTICATED - User not logged in and trying to access a non-released object"
          },
          "403": {
            "description": "UNAUTHORIZED - User is not author trying to access a unreleased object or unprivileged user trying to access in review object"
          },
          "404": { "description": "NOT FOUND - Object is not found" }
        }
      }
    },
    "/admin/learning-objects": {
      "get": {
        "description": "Gets privilege access objects",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "number" },
            "required": true,
            "description": "The current page"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "number" },
            "required": true,
            "description": "The object return limit"
          },
          {
            "in": "query",
            "name": "query",
            "schema": { "type": "string" },
            "required": true,
            "description": "The query to search for"
          }
        ],
        "responses": {
          "301": {
            "description": "MOVED PERMENENTLY - Redirects to GET /learning-objects"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User is not privileged" }
        }
      },
      "patch": {
        "description": "Privileged user update a learning object",
        "tags": ["Learning Object Service"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "learningObject": {
                    "required": true,
                    "description": "The learning object to update",
                    "type": "object",
                    "$ref": "#/components/schemas/LearningObject"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "301": {
            "description": "MOVED PERMENENTLY - Redirects to PATCH /users/:username/learning-objects/:id"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User is not privileged" }
        }
      }
    },
    "/admin/learning-objects/{learningObjectId}": {
      "get": {
        "description": "Privileged user get a learning object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "responses": {
          "301": {
            "description": "MOVED PERMENENTLY - Redirects to GET /learning-objects/:id"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User is not privileged" }
        }
      }
    },
    "/admin/users/{username}/learning-objects/{learningObjectName}": {
      "delete": {
        "description": "Privileged user delete a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "learningObjectName",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "responses": {
          "301": {
            "description": "MOVED PERMENENTLY - Redirects to DELETE /users/:username/learning-objects/:id"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User is not privileged" }
        }
      }
    },
    "/admin/users/{username}/learning-objects/multiple/{learningObjectIDs}": {
      "delete": {
        "description": "Privileged user delete multiple objects",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          },
          {
            "in": "path",
            "name": "learningObjectIDs",
            "schema": { "type": "string" },
            "required": true,
            "description": "The ids to delete, separated by commas"
          }
        ],
        "responses": {
          "301": {
            "description": "MOVED PERMENENTLY - Redirects to DELETE /users/:username/learning-objects/multiple/:learningObjectIDs"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User is not privileged" }
        }
      }
    },
    "/users/{userId}/learning-objects/{learningObjectId}/change-author": {
      "post": {
        "description": "Changes a object's author",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The user id of the object author"
          },
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "The new author id",
                    "required": true,
                    "example": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User is not privileged" },
          "404": { "description": "NOT FOUND - User or object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/status": {
      "post": {
        "description": "Changes the status of a learning-object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The desired status of the learning object",
                    "required": true,
                    "example": "proofing"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Object is not eligible for the specified status change"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User is not privileged" },
          "404": { "description": "NOT FOUND - User or object not found" }
        }
      }
    },
    "/learning-objects/{username}/{learningObjectName}": {
      "get": {
        "description": "Gets a object's CUID based on name",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object author"
          },
          {
            "in": "path",
            "name": "learningObjectName",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object's name"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "11111111-2222-3333-4444-555555"
                }
              }
            }
          },
          "404": {
            "description": "NOT FOUND - Object was not found for given name"
          }
        }
      }
    },
    "/learning-objects/{learningObjectId}/learning-outcomes": {
      "post": {
        "description": "Adds a learning outcome",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the learning object"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Partial outcome",
                "$ref": "#/components/schemas/Outcome"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the new outcome",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - Request body missing required information to make a outcome"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not the author or privileged user"
          },
          "404": { "description": "NOT FOUND - Outcome not found" }
        }
      }
    },
    "/learning-objects/{learningObjectId}/learning-outcomes/{outcomeId}": {
      "patch": {
        "description": "Updates a outcome",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the learning object"
          },
          {
            "in": "path",
            "name": "outcomeId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the outcome"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Partial outcome",
                "$ref": "#/components/schemas/Outcome"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Outcome"
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - Request body missing required information to update the outcome"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not the author or privileged user"
          },
          "404": { "description": "NOT FOUND - Outcome or object not found" }
        }
      },
      "delete": {
        "description": "Deletes an outcome",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the learning object"
          },
          {
            "in": "path",
            "name": "outcomeId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the outcome"
          }
        ],
        "responses": {
          "204": { "description": "NO CONTENT" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not the author or privileged user"
          },
          "404": { "description": "NOT FOUND - Outcome or object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{learningObjectId}/outcomes": {
      "get": {
        "description": "Gets a object's outcomes",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the learning object"
          },
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Outcome" }
                }
              }
            }
          },
          "404": { "description": "NOT FOUND - Learning object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/relevancy-check": {
      "patch": {
        "description": "Updates the nextCheck attribute",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The learning object's author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object id of the learning object"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "year": {
                    "type": "number",
                    "required": true,
                    "description": "The amount of years from now in the future (1, 2, or 3)",
                    "example": 3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - The year in the body is missing or invalid"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have editor or admin privileges"
          },
          "404": { "description": "NOT FOUND - Learning object not found" }
        }
      }
    },
    "/topics": {
      "get": {
        "description": "Get a list of topics",
        "tags": ["Learning Object Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Topic" }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/learning-outcomes/{outcomeId}/guidelines": {
      "patch": {
        "description": "Updates the guidelines attribute",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The learning object's author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object id of the learning object"
          },
          {
            "in": "path",
            "name": "outcomeId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the outcome being updated"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "guidelines": {
                    "type": "array",
                    "required": true,
                    "description": "The complete list of guidelines that should belong to an outcome at any given time",
                    "example": ["000000000000000000000000"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - The guidelines body is empty, or the ids are invalid mongo ids"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have editor, admin, or curator privileges"
          },
          "404": {
            "description": "NOT FOUND - Learning object not found, Guidelines not found, Outcome not found"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/topics": {
      "patch": {
        "description": "Updates topics on a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The learning object's author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object id of the learning object"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "topicIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "required": true,
                    "description": "An array of topic ids"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Topic ids provided is not a valid id"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have editor or admin privileges"
          },
          "404": {
            "description": "NOT FOUND - Learning object or topic not found"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{id}/topics/{topicId}": {
      "delete": {
        "description": "Deletes a topic from a object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The learning object's author's username"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object id of the learning object"
          },
          {
            "in": "path",
            "name": "topicId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the topic"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Topic id provided is not a valid id"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have editor or admin privileges"
          },
          "404": {
            "description": "NOT FOUND - Learning object or topic not found"
          }
        }
      }
    },
    "/learning-objects/evaluators": {
      "post": {
        "description": "Assigns evaluators to objects",
        "tags": ["Learning Object Service"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cuids": {
                    "type": "array",
                    "items": { "type": "string" },
                    "required": true,
                    "description": "An array of cuids"
                  },
                  "assignerIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "required": true,
                    "description": "An array of user ids"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Assigner id(s) provided do not have an access group"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have curator, editor, or admin privileges"
          },
          "404": {
            "description": "NOT FOUND - Learning objects or users were not found"
          },
          "409": {
            "description": "CONFLICT - A given user has already been assigned to one or more cuids"
          }
        }
      },
      "patch": {
        "description": "Unassigns evaluators to objects",
        "tags": ["Learning Object Service"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cuids": {
                    "type": "array",
                    "items": { "type": "string" },
                    "required": true,
                    "description": "An array of cuids"
                  },
                  "assignerIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "required": true,
                    "description": "An array of user ids"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "description": "NO CONTENT" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have curator, editor, or admin privileges"
          },
          "404": {
            "description": "NOT FOUND - Learning objects or users were not found"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{cuid}/evaluation": {
      "patch": {
        "description": "Evaluates a learning object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The learning object's author's username"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the learning object"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have mapper, reviewer, curator, editor, or admin privileges"
          },
          "404": { "description": "NOT FOUND - Learning object was not found" }
        }
      }
    },
    "/users/:username/evaluations?status": {
      "get": {
        "description": "Gets evaluator's assigned learning objects",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The evaluator's username"
          },
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string" },
            "required": false,
            "description": "The requested status of evaluated learning objects"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User does not have curator, editor, or admin privileges"
          },
          "404": {
            "description": "NOT FOUND - Learning objects or users were not found"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{cuid}/versions": {
      "post": {
        "description": "Creates a object revision",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The learning object's author's username"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the learning object"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "revisionUri": {
                      "type": "string",
                      "description": "The uri of the new object revision",
                      "required": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - Revision already exists, object creating revision for is not released, username provided in params in not author username"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not object author or have editor/admin privilege"
          },
          "404": { "description": "NOT FOUND - Learning object not found" }
        }
      },
      "delete": {
        "description": "Deletes the revision of the learning-object",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The learning object's author's username"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the learning object"
          }
        ],
        "responses": {
          "204": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Username provided in params in not author username"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not object author or have editor/admin privilege"
          },
          "404": {
            "description": "NOT FOUND - Learning object not found or Learning Object revision not found"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{learningObjectId}/revisions/{revisionId}": {
      "get": {
        "description": "Gets a object revision",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The learning object's author's username"
          },
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the learning object"
          },
          {
            "in": "path",
            "name": "revisionId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the revision"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a learning object revision",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LearningObject" }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not the object author or privileged user"
          },
          "404": { "description": "NOT FOUND - Revision not found" }
        }
      }
    },
    "/learning-objects/stats": {
      "get": {
        "description": "Gets stats on objects",
        "tags": ["Learning Object Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LearningObjectStats" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/learning-objects/{learningObjectId}/submissions": {
      "get": {
        "description": "Gets if this is the first time the object has been submitted",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's user id"
          },
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          },
          {
            "in": "query",
            "name": "collection",
            "schema": { "type": "string" },
            "required": true,
            "description": "The collection submitting to"
          },
          {
            "in": "path",
            "name": "hasSubmission",
            "schema": { "type": "boolean" },
            "required": true,
            "description": "Whether the object has a submission"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isFirstSubmission": {
                      "type": "boolean",
                      "required": true,
                      "example": true,
                      "description": "Returns true if this is the first time the object has been submitted to a collection for review, false otherwise"
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User email not verified" },
          "501": {
            "description": "NOT IMPLEMENTED - User is missing query parameters hasSubmission and collection"
          }
        }
      },
      "post": {
        "description": "Submits a object for review",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's user id"
          },
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collection": {
                    "type": "string",
                    "required": true,
                    "description": "The collection submitting to",
                    "example": "nccp"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not the object author"
          },
          "404": { "description": "NOT FOUND - Object not found" }
        }
      },
      "delete": {
        "description": "Deletes a object submission",
        "tags": ["Learning Object Service"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The object author's user id"
          },
          {
            "in": "path",
            "name": "learningObjectId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the object"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Object has already been canceled"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not the object author"
          },
          "409": { "description": "CONFLICT - Object is not in waiting" }
        }
      }
    },
    "/learning-objects/metrics": {
      "get": {
        "description": "Gets the learning object metrics for CLARK",
        "tags": ["Library Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Metric" }
              }
            }
          },
          "404": { "description": "NOT FOUND - No metrics were found" }
        }
      }
    },
    "/users/{username}/learning-objects/{cuid}/metrics": {
      "get": {
        "description": "Gets the metrics for a learning object",
        "tags": ["Library Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The author's username"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the learning object"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "saves": {
                      "type": "integer",
                      "description": "The number of saves for a particular object",
                      "example": 200
                    },
                    "downloads": {
                      "type": "integer",
                      "description": "The number of downloads for a particular object",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NOT FOUND - No metrics were found for the specific username and cuid"
          }
        }
      }
    },
    "/{username}/library/learning-objects": {
      "get": {
        "description": "Gets a user's library",
        "tags": ["Library Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the user's library"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The current page of the library"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer" },
            "required": true,
            "description": "The number of objects to return"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userLibraryItems": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/LibraryItem" },
                      "required": true
                    },
                    "lastPage": {
                      "type": "integer",
                      "required": false,
                      "example": 2
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access another user's library"
          },
          "404": { "description": "NOT FOUND - User not found" }
        }
      },
      "post": {
        "description": "Adds a learning object to the user's library",
        "tags": ["Library Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the user's library"
          }
        ],
        "requestBody": {
          "description": "The cuid, version, and author's username",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cuid": {
                    "type": "string",
                    "description": "The cuid of the learning object to save",
                    "required": true,
                    "example": "00000000-1111-2222-3333-444444444444"
                  },
                  "version": {
                    "type": "integer",
                    "description": "The version of the learning object",
                    "required": true,
                    "example": 1
                  },
                  "authorUsername": {
                    "type": "string",
                    "description": "The username of the object's author",
                    "required": true,
                    "example": "jdoe1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "CREATED - Successfully added to library" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access and modify another user's library"
          },
          "404": {
            "description": "NOT FOUND - User or learning object not found"
          }
        }
      }
    },
    "/{username}/library/learning-objects/{cuid}": {
      "delete": {
        "description": "Deletes an item from the user's library",
        "tags": ["Library Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the user's library"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the learning object to remove"
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT - Successfully deleted from library"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access and modify another user's library"
          },
          "404": {
            "description": "NOT FOUND - User or learning object not found"
          }
        }
      }
    },
    "/users/{username}/notifications": {
      "get": {
        "description": "Gets a user's update notifications",
        "tags": ["Notification Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the user"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "number" },
            "required": true,
            "description": "The current page"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "number" },
            "required": true,
            "description": "The notification limit to send back in the request"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lastPage": {
                      "type": "number",
                      "example": 1,
                      "required": true
                    },
                    "notifications": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Notification" },
                      "required": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BAD CONTENT - Page and limit query parameters must be greater then zero"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access another user's notifications"
          },
          "404": { "description": "NOT FOUND - User not found" }
        }
      }
    },
    "/users/{username}/notifications/{id}": {
      "delete": {
        "description": "Deletes a notification for a user",
        "tags": ["Notification Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the user"
          },
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the notification"
          }
        ],
        "responses": {
          "204": { "description": "NO CONTENT" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to delete another user's notifications"
          },
          "404": { "description": "NOT FOUND - User or notification not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{cuid}/notifications": {
      "post": {
        "description": "Create a notification for a object",
        "tags": ["Notification Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the author of the learning object"
          },
          {
            "in": "path",
            "name": "cuid",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object to make the notification for"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NotificationPayload" }
            }
          }
        },
        "responses": {
          "201": { "description": "CREATED" },
          "400": { "description": "BAD REQUEST - Request body invalid" },
          "401": { "description": "UNAUTHENTICATED - User is not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is not admin or editor"
          },
          "404": { "description": "NOT FOUND - Learning object not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{CUID}/version/{version}/ratings": {
      "get": {
        "description": "Gets the ratings for a learning object",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "CUID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          },
          {
            "in": "path",
            "name": "version",
            "schema": { "type": "number" },
            "required": true,
            "description": "The version number of the object"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "The cuid of the object",
                      "example": "00000000-1111-2222-3333-444444444444"
                    },
                    "avgValue": {
                      "type": "number",
                      "description": "The average rating value",
                      "example": 5
                    },
                    "ratings": {
                      "type": "array",
                      "description": "The array of ratings left on the object",
                      "items": { "$ref": "#/components/schemas/Rating" }
                    }
                  }
                }
              }
            }
          },
          "404": { "description": "NOT FOUND - Learning object not found" }
        }
      },
      "post": {
        "description": "Creates a rating on a object",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "CUID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          },
          {
            "in": "path",
            "name": "version",
            "schema": { "type": "number" },
            "required": true,
            "description": "The version number of the object"
          }
        ],
        "requestBody": {
          "description": "The rating information to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Rating"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "NO CONTENT" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - Object attempting to rate is in review (not released)"
          },
          "404": { "description": "NOT FOUND - Learning object was not found" }
        }
      }
    },
    "/ratings/{ratingId}": {
      "get": {
        "description": "Gets a specific rating by id",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "ratingId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The rating id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Rating"
                }
              }
            }
          },
          "404": { "description": "NOT FOUND - Rating was not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{CUID}/version/{version}/ratings/{ratingID}": {
      "patch": {
        "description": "Updates a rating on a object",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "CUID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          },
          {
            "in": "path",
            "name": "version",
            "schema": { "type": "number" },
            "required": true,
            "description": "The version number of the object"
          },
          {
            "in": "path",
            "name": "ratingID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the rating to update"
          }
        ],
        "requestBody": {
          "description": "The rating information to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Rating"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access and modify another user's rating"
          },
          "404": { "description": "NOT FOUND - Rating or object was not found" }
        }
      },
      "delete": {
        "description": "Deletes a rating from a learning object",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "CUID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          },
          {
            "in": "path",
            "name": "version",
            "schema": { "type": "number" },
            "required": true,
            "description": "The version number of the object"
          },
          {
            "in": "path",
            "name": "ratingID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the rating to delete"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User is trying to access and modify another user's rating"
          },
          "404": { "description": "NOT FOUND - Rating or object was not found" }
        }
      }
    },
    "/users/{username}/learning-objects/{CUID}/version/{version}/ratings/{ratingID}/flags": {
      "post": {
        "description": "Flags a rating to be reviewed",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "CUID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          },
          {
            "in": "path",
            "name": "version",
            "schema": { "type": "number" },
            "required": true,
            "description": "The version number of the object"
          },
          {
            "in": "path",
            "name": "ratingID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the rating"
          }
        ],
        "requestBody": {
          "description": "The flag information to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Flag"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "NO CONTENT" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - Author is attempting to flag a rating"
          },
          "404": {
            "description": "NOT FOUND - Learning object or rating was not found"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{CUID}/version/{version}/ratings/{ratingID}/responses": {
      "post": {
        "description": "Creates a response to a rating",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "CUID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          },
          {
            "in": "path",
            "name": "version",
            "schema": { "type": "number" },
            "required": true,
            "description": "The version number of the object"
          },
          {
            "in": "path",
            "name": "ratingID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the rating"
          }
        ],
        "requestBody": {
          "description": "The flag information to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Response"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - Is not author or contributor"
          },
          "404": {
            "description": "NOT FOUND - Learning object or rating was not found"
          }
        }
      }
    },
    "/users/{username}/learning-objects/{CUID}/version/{version}/ratings/{ratingID}/responses/{responseID}": {
      "delete": {
        "description": "Deletes a response",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "CUID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          },
          {
            "in": "path",
            "name": "version",
            "schema": { "type": "number" },
            "required": true,
            "description": "The version number of the object"
          },
          {
            "in": "path",
            "name": "ratingID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the rating"
          },
          {
            "in": "path",
            "name": "responseID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the response"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - Is not the creator of the response"
          },
          "404": {
            "description": "NOT FOUND - Learning object, rating, or response was not found"
          }
        }
      },
      "patch": {
        "description": "Updates a response",
        "tags": ["Rating Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username of the object's author"
          },
          {
            "in": "path",
            "name": "CUID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The cuid of the object"
          },
          {
            "in": "path",
            "name": "version",
            "schema": { "type": "number" },
            "required": true,
            "description": "The version number of the object"
          },
          {
            "in": "path",
            "name": "ratingID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the rating"
          },
          {
            "in": "path",
            "name": "responseID",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the response"
          }
        ],
        "requestBody": {
          "description": "The flag information to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Response"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - Is not the creator of the response"
          },
          "404": {
            "description": "NOT FOUND - Learning object, rating, or response was not found"
          }
        }
      }
    },
    "/authenticate": {
      "get": {
        "description": "authenticates a user",
        "tags": ["Standard Guideline Service"],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "INVALID ACCESS - User does not have a valid certificate"
          },
          "403": {
            "description": "FORBIDDEN - User is not whitelisted, please use a whitelisted certificate"
          }
        }
      }
    },
    "/frameworks/{id}": {
      "get": {
        "description": "Gets a framework by id",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The framework id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FrameworkDocument" }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - The provided id is not a valid mongo id"
          },
          "404": {
            "description": "NOT FOUND - Framework with id ${id} was not found"
          }
        }
      },
      "patch": {
        "description": "Updates a framework by id",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The framework id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "required": true,
                    "description": "The name of the framework",
                    "example": "Some Framework"
                  },
                  "author": {
                    "type": "string",
                    "required": true,
                    "description": "The author of the of the framework",
                    "example": "Some Author"
                  },
                  "source": {
                    "type": "string",
                    "required": true,
                    "description": "The source of the framework",
                    "example": "Some Source"
                  },
                  "description": {
                    "type": "string",
                    "required": true,
                    "description": "The description of the framework",
                    "example": "Some Description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Missing property ${property} in Framework, The provided id is not a valid mongo id"
          },
          "401": { "description": "INVALID ACCESS - Not Authorized" },
          "403": {
            "description": "FORBIDDEN - User is not whitelisted, please use a whitelisted certificate"
          },
          "404": {
            "description": "NOT FOUND - Framework with id ${id} was not found, Guideline or standard with id ${id} was not found"
          }
        }
      },
      "delete": {
        "description": "Deletes a framework by id",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The framework id"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - The provided id is not a valid mongo id"
          },
          "401": { "description": "INVALID ACCESS - Not Authorized" },
          "403": {
            "description": "FORBIDDEN - User is not whitelisted, please use a whitelisted certificate"
          },
          "404": {
            "description": "NOT FOUND - Framework with id ${id} was not found"
          }
        }
      }
    },
    "/frameworks": {
      "post": {
        "description": "Creates a framework",
        "tags": ["Standard Guideline Service"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "required": true,
                    "description": "The name of the framework",
                    "example": "Some Framework"
                  },
                  "author": {
                    "type": "string",
                    "required": true,
                    "description": "The author of the of the framework",
                    "example": "Some Author"
                  },
                  "source": {
                    "type": "string",
                    "required": true,
                    "description": "The source of the framework",
                    "example": "Some Source"
                  },
                  "description": {
                    "type": "string",
                    "required": true,
                    "description": "The description of the framework",
                    "example": "Some Description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "OK - created new framework" },
          "400": {
            "description": "BAD REQUEST - Missing property ${property} in Framework"
          },
          "401": { "description": "INVALID ACCESS - Not Authorized" },
          "403": {
            "description": "FORBIDDEN - User is not whitelisted, please use a whitelisted certificate"
          }
        }
      },
      "get": {
        "description": "Searches frameworks given a text query",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "query",
            "name": "text",
            "schema": { "type": "string" },
            "description": "The search string",
            "example": "Framework"
          },
          {
            "in": "query",
            "name": "year",
            "schema": { "type": "string" },
            "description": "The year a guideline or framework is assigned",
            "example": 2021
          },
          {
            "in": "query",
            "name": "levels",
            "schema": { "type": "string" },
            "description": "The levels to guidelines apply to",
            "example": "high,middle"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "string" },
            "description": "The current page, default is 1",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "string" },
            "description": "The max number of search indexes returned, default is 10",
            "example": 10
          },
          {
            "in": "query",
            "name": "type",
            "schema": { "type": "string" },
            "description": "Determine whether to search for guidelines or frameworks, default is guidelines",
            "example": "guidelines"
          },
          {
            "in": "query",
            "name": "deprecated",
            "schema": { "type": "string" },
            "description": "Filter for deprecated frameworks, can be set to 'true', 'false', or 'all' defaults to 'false'",
            "example": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrameworkSearchResults"
                }
              }
            }
          }
        }
      }
    },
    "/frameworks/{id}/deprecate": {
      "patch": {
        "description": "Deprecate a framework by id",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The framework id"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - The provided id is not a valid mongo id"
          },
          "401": { "description": "INVALID ACCESS - Not Authorized" },
          "403": {
            "description": "FORBIDDEN - User is not whitelisted, please use a whitelisted certificate"
          },
          "404": {
            "description": "NOT FOUND - Framework with id ${id} was not found"
          },
          "409": { "description": "CONFLICT - Framework is already deprecated" }
        }
      }
    },
    "/frameworks/{id}/guidelines": {
      "get": {
        "description": "Gets all the Standards and Guidelines associated with a specific framework id",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The framework id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Guideline" }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - The provided id is not a valid mongo id, Missing property ${property} in Framework"
          }
        }
      }
    },
    "/guidelines/{id}": {
      "get": {
        "description": "Gets a specific Guideline or Standard by id",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The guideline id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Guideline" }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - The provided id is not a valid mongo id"
          },
          "404": {
            "description": "NOT FOUND - Guideline or standard with id ${id} was not found"
          }
        }
      },
      "patch": {
        "description": "Updates a Guideline or Standard by id",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The guideline id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "required": true,
                    "description": "The name of the framework",
                    "example": "Some Framework"
                  },
                  "levels": {
                    "type": "array",
                    "required": true,
                    "description": "The level the guideline applies to",
                    "example": ["high"]
                  },
                  "year": {
                    "type": "string",
                    "required": true,
                    "description": "The year that the guideline applies to",
                    "example": 2021
                  },
                  "frameworkId": {
                    "type": "ObjectId",
                    "required": true,
                    "description": "The framework id that the guideline is associated to",
                    "example": "ObjectId(\"60d0dc0192019201f5e74716\")"
                  },
                  "guideline": {
                    "type": "string",
                    "required": true,
                    "description": "The description of the guideline",
                    "example": "Some Description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Missing property ${property} in Guideline or Standard, Level ${level} is not a valid level type, Missing property ${property} in Search Item, The provided id is not a valid mongo id, Guideline id does not match the id to update in the search item"
          },
          "401": { "description": "INVALID ACCESS - Not Authorized" },
          "403": {
            "description": "FORBIDDEN - User is not whitelisted, please use a whitelisted certificate"
          },
          "404": {
            "description": "NOT FOUND - Guideline or standard with id ${id} was not found, Framework with id ${id} was not found, Search item with guideline id ${id} was not found"
          }
        }
      },
      "delete": {
        "description": "Deletes a Guideline or Standard by id",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The guideline id"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - The provided id is not a valid mongo id"
          },
          "401": { "description": "INVALID ACCESS - Not Authorized" },
          "403": {
            "description": "FORBIDDEN - User is not whitelisted, please use a whitelisted certificate"
          },
          "404": {
            "description": "NOT FOUND - Guideline or standard with id ${id} was not found, Search item with guideline id ${id} was not found"
          }
        }
      }
    },
    "/guidelines": {
      "post": {
        "description": "Creates a new Guideline or Standard in the database",
        "tags": ["Standard Guideline Service"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "required": true,
                    "description": "The name of the framework",
                    "example": "Some Framework"
                  },
                  "levels": {
                    "type": "array",
                    "required": true,
                    "description": "The level the guideline applies to",
                    "example": ["high"]
                  },
                  "year": {
                    "type": "string",
                    "required": true,
                    "description": "The year that the guideline applies to",
                    "example": 2021
                  },
                  "frameworkId": {
                    "type": "ObjectId",
                    "required": true,
                    "description": "The framework id that the guideline is associated to",
                    "example": "ObjectId(\"60d0dc0192019201f5e74716\")"
                  },
                  "guideline": {
                    "type": "string",
                    "required": true,
                    "description": "The description of the guideline",
                    "example": "Some Description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "BAD REQUEST - Missing property ${property} in Guideline or Standard, Level ${level} is not a valid level type, Missing property ${property} in Search Item, The provided id is not a valid mongo id"
          },
          "401": { "description": "INVALID ACCESS - Not Authorized" },
          "403": {
            "description": "FORBIDDEN - User is not whitelisted, please use a whitelisted certificate"
          },
          "409": {
            "description": "CONFLICT - Search item already exists for guideline id ${id}"
          }
        }
      },
      "get": {
        "description": "Searches guidelines/standards given a text, year, and level query",
        "tags": ["Standard Guideline Service"],
        "parameters": [
          {
            "in": "query",
            "name": "text",
            "schema": { "type": "string" },
            "description": "The search string",
            "example": "Framework"
          },
          {
            "in": "query",
            "name": "year",
            "schema": { "type": "string" },
            "description": "The year a guideline or framework is assigned",
            "example": 2021
          },
          {
            "in": "query",
            "name": "levels",
            "schema": { "type": "string" },
            "description": "The levels to guidelines apply to",
            "example": "high,middle"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "string" },
            "description": "The current page, default is 1",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "string" },
            "description": "The max number of search indexes returned, default is 10",
            "example": 10
          },
          {
            "in": "query",
            "name": "type",
            "schema": { "type": "string" },
            "description": "Determine whether to search for guidelines or frameworks, default is guidelines",
            "example": "guidelines"
          },
          {
            "in": "query",
            "name": "deprecated",
            "schema": { "type": "string" },
            "description": "Filter for deprecated guidelines, can be set to 'true', 'false', or 'all' defaults to 'false'",
            "example": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SearchResults" }
              }
            }
          }
        }
      }
    },
    "/guidelines/members": {
      "get": {
        "description": "Gets users with mapper access group",
        "tags": ["User Service"],
        "responses": {
          "200": {
            "description": "Gets a list of mappers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User not an admin" }
        }
      }
    },
    "/guidelines/members/{memberId}": {
      "put": {
        "description": "Adds a new mapper",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "memberId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the user to give mapper privileges to"
          }
        ],
        "responses": {
          "201": { "description": "CREATED" },
          "400": {
            "description": "BAD REQUEST - User already has the mapper privilege"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User not an admin" },
          "404": { "description": "NOT FOUND - User not found" }
        }
      },
      "delete": {
        "description": "Removes the mapper privilege of a user",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "memberId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the user to revoke privileges of"
          }
        ],
        "responses": {
          "204": { "description": "NO CONTENT" },
          "400": {
            "description": "BAD REQUEST - The user doesn't have the mapper privilege"
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User not an admin" },
          "404": { "description": "NOT FOUND - User not found" }
        }
      }
    },
    "/users/identifiers/active": {
      "get": {
        "description": "Checks if a current user is using a username",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The username to check if in use"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "inUse": {
                      "type": "boolean",
                      "description": "True if username is in use, false otherwise",
                      "example": true,
                      "required": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/curators/{collection}": {
      "get": {
        "description": "Gets curators for a collection",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "schema": { "type": "string" },
            "required": true,
            "description": "The collection"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of curators for a collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "404": { "description": "NOT FOUND - Collection not found" }
        }
      }
    },
    "/collections/{collectionName}/members": {
      "get": {
        "description": "Gets a list of collection reviewers",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "schema": { "type": "string" },
            "required": true,
            "description": "The collection's name"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collectionName}/members/{memberId}": {
      "put": {
        "description": "Assign a reviewer to a collection",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "schema": { "type": "string" },
            "required": true,
            "description": "The collection's name"
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the user"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not an admin or collection curator"
          },
          "404": { "description": "NOT FOUND - User or collection not found" }
        }
      },
      "patch": {
        "description": "Edits a reviewer's privilege in a collection",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "schema": { "type": "string" },
            "required": true,
            "description": "The collection's name"
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the user"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not an admin or collection curator"
          },
          "404": { "description": "NOT FOUND - User or collection not found" }
        }
      },
      "delete": {
        "description": "Removes a reviewer's privilege in a collection",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "collectionName",
            "schema": { "type": "string" },
            "required": true,
            "description": "The collection's name"
          },
          {
            "in": "path",
            "name": "memberId",
            "schema": { "type": "string" },
            "required": true,
            "description": "The id of the user"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not an admin or collection curator"
          },
          "404": { "description": "NOT FOUND - User or collection not found" }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Gets a list of users (authenticated)",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "schema": { "type": "string" },
            "required": false,
            "description": "The username to search for"
          },
          {
            "in": "query",
            "name": "name",
            "schema": { "type": "string" },
            "required": false,
            "description": "The name to search for"
          },
          {
            "in": "query",
            "name": "email",
            "schema": { "type": "string" },
            "required": false,
            "description": "The email to search for"
          },
          {
            "in": "query",
            "name": "organization",
            "schema": { "type": "string" },
            "required": false,
            "description": "The organization of the user to search for"
          },
          {
            "in": "query",
            "name": "username",
            "schema": { "type": "string" },
            "required": false,
            "description": "The ota code to validate"
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": { "type": "string" },
            "required": false,
            "description": "The value of which to order by (ie. username or name, etc.)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User not an admin" }
        }
      },
      "post": {
        "description": "Creates a user",
        "tags": ["User Service"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/UserBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/UserBody"
                    },
                    "tokens": {
                      "type": "object",
                      "properties": {
                        "bearer": {
                          "type": "string",
                          "required": true,
                          "description": "Bearer token"
                        },
                        "openId": {
                          "type": "string",
                          "required": true,
                          "description": "The cognito id"
                        },
                        "user": {
                          "type": "object",
                          "$ref": "#/components/schemas/UserBody"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Edits a user's info",
        "tags": ["User Service"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/UserBody"
              }
            }
          }
        },
        "responses": { "200": { "description": "OK" } }
      }
    },
    "/users/stats": {
      "get": {
        "description": "Gets the stats for a user",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The collection's name"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "type": "number",
                      "example": 1,
                      "required": true
                    },
                    "organizations": {
                      "type": "number",
                      "example": 1,
                      "required": true
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVICE ERROR - Any error is thrown"
          }
        }
      }
    },
    "/users/tokens": {
      "post": {
        "description": "Login a user",
        "tags": ["User Service"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "The user's username",
                    "example": "jdoe1",
                    "type": "string",
                    "required": true
                  },
                  "password": {
                    "description": "The user's password",
                    "example": "M0ckPa$$word",
                    "type": "string",
                    "required": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/UserBody"
                    },
                    "tokens": {
                      "type": "object",
                      "properties": {
                        "bearer": {
                          "type": "string",
                          "required": true,
                          "description": "Bearer token"
                        },
                        "openId": {
                          "type": "string",
                          "required": true,
                          "description": "The cognito id"
                        },
                        "user": {
                          "type": "object",
                          "$ref": "#/components/schemas/UserBody"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "BAD REQUEST - Incorrect login credentials" }
        }
      },
      "get": {
        "description": "Gets the current user object",
        "tags": ["User Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" }
        }
      }
    },
    "/users/{username}/profile": {
      "get": {
        "description": "Gets a user's profile",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The user's username"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/collections": {
      "get": {
        "description": "Gets an array of user learning object metadata for collection, version, cuid, and status of all affiliated learning objects",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The user's username of profile being viewed"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          }
        }
      }
    },
    "/users/tokens/refresh": {
      "get": {
        "description": "Refreshes a user's token",
        "tags": ["User Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/UserBody"
                    },
                    "tokens": {
                      "type": "object",
                      "properties": {
                        "bearer": {
                          "type": "string",
                          "required": true,
                          "description": "Bearer token"
                        },
                        "openId": {
                          "type": "string",
                          "required": true,
                          "description": "The cognito id"
                        },
                        "user": {
                          "type": "object",
                          "$ref": "#/components/schemas/UserBody"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/tokens": {
      "delete": {
        "description": "Logs out a user",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": { "type": "string" },
            "required": true,
            "description": "The user's username"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" }
        }
      }
    },
    "/users/ota-codes": {
      "get": {
        "description": "Gets and validates a ota-code then redirects the user",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "query",
            "name": "otaCode",
            "schema": { "type": "string" },
            "required": true,
            "description": "The ota code to validate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Redirects user to verify email or reset password"
          }
        }
      },
      "post": {
        "description": "Sends a ota code email",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "schema": { "type": "string" },
            "required": true,
            "description": "The type of action for the email"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "required": true,
                    "description": "The email to send the ota code to",
                    "example": "jdoe1@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": { "description": "BAD REQUEST - Invalid action type" }
        }
      },
      "patch": {
        "description": "Resets a user's password",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "query",
            "name": "otaCode",
            "schema": { "type": "string" },
            "required": true,
            "description": "The ota code to validate"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "type": "string",
                    "required": true,
                    "description": "The new password"
                  }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "OK" } }
      }
    },
    "/users/search": {
      "get": {
        "description": "Searches for users given a query",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "schema": { "type": "string" },
            "required": false,
            "description": "The username to search for"
          },
          {
            "in": "query",
            "name": "name",
            "schema": { "type": "string" },
            "required": false,
            "description": "The name to search for"
          },
          {
            "in": "query",
            "name": "email",
            "schema": { "type": "string" },
            "required": false,
            "description": "The email to search for"
          },
          {
            "in": "query",
            "name": "organization",
            "schema": { "type": "string" },
            "required": false,
            "description": "The organization of the user to search for"
          },
          {
            "in": "query",
            "name": "username",
            "schema": { "type": "string" },
            "required": false,
            "description": "The ota code to validate"
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": { "type": "string" },
            "required": false,
            "description": "The value of which to order by (ie. username or name, etc.)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          }
        }
      }
    },
    "/validate-captcha": {
      "get": {
        "description": "Validates the user's captcha",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "schema": { "type": "string" },
            "required": false,
            "description": "The token to verify"
          }
        ],
        "responses": { "200": { "description": "OK" } }
      }
    },
    "/users/{id}/roles": {
      "get": {
        "description": "Gets the roles a user has",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": false,
            "description": "The id of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "string" } }
              }
            }
          },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": { "description": "UNAUTHORIZED - User not an admin" },
          "404": { "description": "NOT FOUND - Unable to find user" }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "description": "Gets a user by their username",
        "tags": ["User Service"],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "schema": { "type": "string" },
            "required": true,
            "description": "The identifier of the user (userId or username)"
          },
          {
            "in": "query",
            "name": "q",
            "schema": { "type": "string" },
            "required": true,
            "description": "Identifies whether querying by userId or username"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": { "description": "BAD REQUEST - Username not provided" },
          "401": { "description": "UNAUTHENTICATED - User not logged in" },
          "403": {
            "description": "UNAUTHORIZED - User not an admin or editor"
          },
          "404": { "description": "NOT FOUND - Unable to find user" }
        }
      }
    },
    "/keys": {
      "get": {
        "description": "Gets a public key from the backend",
        "tags": ["User Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "publicKey": {
                      "type": "string",
                      "description": "The public key to encrypt with"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/google": {
      "get": {
        "description": "Redirects to Google sign in",
        "tags": ["User Service"],
        "responses": { "302": { "description": "Redirect" } }
      }
    },
    "/google/redirect": {
      "get": {
        "description": "Gets Google user information",
        "tags": ["User Service"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "$ref": "#/components/schemas/UserBody"
                    },
                    "tokens": {
                      "type": "object",
                      "properties": {
                        "bearer": {
                          "type": "string",
                          "required": true,
                          "description": "Bearer token"
                        },
                        "openId": {
                          "type": "string",
                          "required": true,
                          "description": "The cognito id"
                        },
                        "user": {
                          "type": "object",
                          "$ref": "#/components/schemas/UserBody"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "BAD REQUEST - Google sign in incomplete" },
          "404": {
            "description": "BAD REQUEST - Email not found in the database"
          }
        }
      }
    },
    "/downtime": {
      "get": {
        "description": "Gets the downtime status for clark",
        "tags": ["Secured Downtime Service"],
        "responses": {
          "200": {
            "description": "OK - Returns the downtime status as an object with message and isDown",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Downtime" }
              }
            }
          }
        }
      }
    },
    "/clientversion/{clientVersion}": {
      "get": {
        "description": "Gets the client version to see if there is an update",
        "tags": ["Utility Service"],
        "parameters": [
          {
            "in": "path",
            "name": "clientVersion",
            "schema": { "type": "string" },
            "required": true,
            "description": "The version of the client"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "UNAUTHENTICATED - Thrown when no clientVersion is in params"
          },
          "426": {
            "description": "Thrown when the client version is not accurate"
          },
          "500": {
            "description": "INTERNAL - Could not recover the client version"
          }
        }
      }
    },
    "/blogs": {
      "get": {
        "description": "Gets the blogs to display to the user",
        "tags": ["Utility Service"],
        "parameters": [
          {
            "in": "query",
            "name": "recent",
            "schema": { "type": "boolean" },
            "required": false,
            "description": "Whether the most recent blog should be returned or all blogs should be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns array of blog(s)",
            "content": {
              "application/json": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Blog" }
              }
            }
          },
          "500": { "description": "INTERNAL - Unable to get blogs" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LearningObject": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the learning object",
            "example": 0,
            "required": true
          },
          "cuid": {
            "type": "string",
            "description": "The cuid of the learning object",
            "example": "00000000-1111-2222-3333-444444444444",
            "required": true
          },
          "author": {
            "type": "object",
            "description": "A partial user object of the learning object's author",
            "$ref": "#/components/schemas/User",
            "required": true
          },
          "collection": {
            "type": "string",
            "description": "The collection the learning object belongs to",
            "example": "nccp",
            "required": true
          },
          "contributors": {
            "type": "array",
            "description": "A optional array of extra contributors to the object",
            "items": { "$ref": "#/components/schemas/User" },
            "required": true
          },
          "date": {
            "type": "string",
            "description": "The date the learning object was created",
            "example": 0,
            "required": true
          },
          "description": {
            "type": "string",
            "description": "The description of the learning object",
            "example": "This is a description",
            "required": true
          },
          "length": {
            "type": "string",
            "description": "The length of the learning object",
            "example": "nanomodule",
            "required": true
          },
          "name": {
            "type": "string",
            "description": "The name of the learning object",
            "example": "This is a learning object name",
            "required": true
          },
          "status": {
            "type": "string",
            "description": "The current status of the learning object",
            "example": "released",
            "required": true
          },
          "resourceUris": {
            "type": "object",
            "description": "The extra resource uris of the learning object",
            "required": false,
            "$ref": "#/components/schemas/LearningObjectResourceUris"
          },
          "revisionUri": {
            "type": "string",
            "description": "The new revision uri of the learning object",
            "required": true
          },
          "version": {
            "type": "integer",
            "description": "The current version of the learning object",
            "example": 1,
            "required": true
          },
          "levels": {
            "type": "array",
            "description": "An array of appropriate academic levels to the object",
            "items": { "type": "string", "example": "undergraduate" },
            "required": true
          }
        }
      },
      "User": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user",
            "example": 0,
            "required": true
          },
          "username": {
            "type": "string",
            "description": "The username of the user",
            "example": "jdoe1",
            "required": true
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe",
            "required": true
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "jdoe1@gmail.com",
            "required": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "A boolean representing if the user's email has been verified",
            "example": true,
            "required": true
          },
          "organization": {
            "type": "string",
            "description": "The organization of the user",
            "example": "Towson University",
            "required": true
          },
          "bio": {
            "type": "string",
            "description": "A short biography of the user",
            "example": "This is a bio",
            "required": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date when the user was created",
            "example": 0,
            "required": true
          }
        }
      },
      "LearningObjectResourceUris": {
        "properties": {
          "outcomes": {
            "type": "string",
            "description": "The uri for the outcomes of a learning object",
            "example": "https://api-gateway.clark.center/users/jdoe1/learning-objects/000000000000000000000000/outcomes",
            "required": false
          },
          "children": {
            "type": "string",
            "description": "The uri for the children of a learning object",
            "example": "https://api-gateway.clark.center/users/jdoe1/learning-objects/000000000000000000000000/children",
            "required": false
          },
          "materials": {
            "type": "string",
            "description": "The uri for the materials of a learning object",
            "example": "https://api-gateway.clark.center/users/jdoe1/learning-objects/000000000000000000000000/materials",
            "required": false
          },
          "metrics": {
            "type": "string",
            "description": "The uri for the metrics of a learning object",
            "example": "https://api-gateway.clark.center/users/jdoe1/learning-objects/000000000000000000000000/metrics",
            "required": false
          },
          "parents": {
            "type": "string",
            "description": "The uri for the parents of a learning object",
            "example": "https://api-gateway.clark.center/users/jdoe1/learning-objects/000000000000000000000000/parents",
            "required": false
          },
          "ratings": {
            "type": "string",
            "description": "The uri for the ratings of a learning object",
            "example": "https://api-gateway.clark.center/users/jdoe1/learning-objects/000000000000000000000000/ratings",
            "required": false
          }
        }
      },
      "Changelog": {
        "properties": {
          "cuid": {
            "type": "string",
            "description": "The cuid relating to the changelog",
            "example": "00000000-1111-2222-3333-444444444444",
            "required": true
          },
          "logs": {
            "type": "array",
            "description": "The changes made to the object",
            "required": true,
            "items": { "$ref": "#/components/schemas/ChangelogLog" }
          }
        }
      },
      "ChangelogLog": {
        "properties": {
          "date": {
            "type": "number",
            "description": "The date the changelog was created in ms",
            "example": 0,
            "required": true
          },
          "text": {
            "type": "string",
            "description": "The changelog text",
            "example": "This is a change",
            "required": true
          },
          "author": {
            "type": "object",
            "$ref": "#/components/schemas/ChangelogAuthor"
          }
        }
      },
      "ChangelogAuthor": {
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the changelog author",
            "example": 0,
            "required": true
          },
          "name": {
            "type": "string",
            "description": "The name of the changelog author",
            "example": "John Doe",
            "required": true
          },
          "role": {
            "type": "string",
            "description": "The role of the changelog author",
            "example": "admin",
            "required": true
          },
          "profileImage": {
            "type": "string",
            "description": "The profile image of the changelog author",
            "required": true
          }
        }
      },
      "CollectionMetric": {
        "required": ["collection", "metrics"],
        "properties": {
          "collection": {
            "type": "string",
            "description": "The collection pulling metrics from",
            "example": "nccp"
          },
          "metrics": {
            "type": "object",
            "description": "The metrics",
            "$ref": "#/components/schemas/CollectionMetricBody"
          }
        }
      },
      "CollectionMetricBody": {
        "required": ["saves", "downloads"],
        "properties": {
          "saves": {
            "type": "integer",
            "description": "The number of saves for a particular collection",
            "example": 200
          },
          "downloads": {
            "type": "integer",
            "description": "The number of downloads for a particular collection",
            "example": 100
          },
          "authors": {
            "type": "array",
            "description": null,
            "items": { "type": "string", "example": 0 }
          },
          "top5Downloads": {
            "type": "array",
            "description": "The top downloads of a particular collection",
            "items": { "$ref": "#/components/schemas/Download" }
          },
          "statusMetrics": {
            "type": "object",
            "description": "The learning object statuses for the collection",
            "properties": {
              "_id": {
                "type": "string",
                "example": "nccp",
                "required": true,
                "description": "The collection name"
              },
              "count": {
                "type": "number",
                "example": 0,
                "required": true,
                "description": "The total number of objects"
              },
              "released": {
                "type": "number",
                "example": 0,
                "required": true,
                "description": "The number of released objects"
              },
              "waiting": {
                "type": "number",
                "example": 0,
                "required": true,
                "description": "The number of in waiting objects"
              },
              "peerReview": {
                "type": "number",
                "example": 0,
                "required": true,
                "description": "The number of in review objects"
              },
              "proofing": {
                "type": "number",
                "example": 0,
                "required": true,
                "description": "The number of in proofing objects"
              }
            }
          }
        }
      },
      "Download": {
        "required": ["downloads", "learningObjectCuid"],
        "properties": {
          "downloads": {
            "type": "integer",
            "description": "The number of downloads for a particular learning object",
            "example": 100
          },
          "learningObjectCuid": {
            "type": "string",
            "description": "The cuid of the learning object",
            "example": "00000000-1111-2222-3333-444444444444"
          }
        }
      },
      "Collection": {
        "properties": {
          "_id": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The collection id"
          },
          "name": {
            "type": "string",
            "example": "nccp",
            "required": true,
            "description": "The collection name"
          },
          "fullName": {
            "type": "string",
            "example": "National Cybersecurity Curriculum Program",
            "required": false,
            "description": "The collection's full name"
          },
          "abvName": {
            "type": "string",
            "example": "nccp",
            "required": true,
            "description": "The collection's abbreviated name"
          },
          "hasLogo": {
            "type": "boolean",
            "example": true,
            "required": true,
            "description": "True if the collection has a logo"
          },
          "description": {
            "type": "string",
            "example": "This is a collection",
            "required": true,
            "description": "Description of the collection"
          }
        }
      },
      "FileMetadata": {
        "properties": {
          "createdDate": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The date the file was created"
          },
          "description": {
            "type": "string",
            "example": "This is a description",
            "required": true,
            "description": "The description of the file"
          },
          "extension": {
            "type": "string",
            "example": ".pptx",
            "required": true,
            "description": "The file type"
          },
          "lastUpdatedDate": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The date the file was last updated"
          },
          "learningObjectId": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The learning object the file belongs to"
          },
          "packageable": {
            "type": "boolean",
            "example": true,
            "required": true,
            "description": "Whether the file can be packaged in a zip file"
          },
          "storageRevision": {
            "type": "number",
            "example": 0,
            "required": true,
            "description": "The version number of the file in S3"
          },
          "ETag": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The server generated hash of the file's content"
          },
          "fullPath": {
            "type": "string",
            "example": "Labs/lab1.pdf",
            "required": true,
            "description": "The path of the file (including folders and file name)"
          },
          "mimeType": {
            "type": "string",
            "example": "video/mp4",
            "required": true,
            "description": "The mime type of the file"
          },
          "name": {
            "type": "string",
            "example": "presentation.pptx",
            "required": true,
            "description": "The name of the file"
          },
          "size": {
            "type": "number",
            "example": 1000,
            "required": true,
            "description": "The file size (in bytes)"
          }
        }
      },
      "File": {
        "properties": {
          "id": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The id of the file"
          },
          "name": {
            "type": "string",
            "example": "presentation.pptx",
            "required": true,
            "description": "The name of the file"
          },
          "fileType": {
            "type": "string",
            "required": true,
            "description": "The file type"
          },
          "extension": {
            "type": "string",
            "example": ".pptx",
            "required": true,
            "description": "The file type"
          },
          "previewUrl": {
            "type": "string",
            "required": true,
            "description": "The preview url of the file"
          },
          "date": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The date the file was last updated"
          },
          "fullPath": {
            "type": "string",
            "example": "Labs/lab1.pdf",
            "required": true,
            "description": "The path of the file (including folders and file name)"
          },
          "size": {
            "type": "number",
            "example": 1000,
            "required": true,
            "description": "The file size (in bytes)"
          },
          "description": {
            "type": "string",
            "example": "This is a description",
            "required": true,
            "description": "The description of the file"
          },
          "packageable": {
            "type": "boolean",
            "example": true,
            "required": true,
            "description": "Whether the file can be packaged in a zip file"
          },
          "storageRevision": {
            "type": "number",
            "example": 0,
            "required": true,
            "description": "The version number of the file in S3"
          }
        }
      },
      "Url": {
        "properties": {
          "title": {
            "type": "string",
            "example": "This is a title",
            "required": true,
            "description": "The title of the url"
          },
          "url": {
            "type": "string",
            "required": true,
            "description": "The url"
          }
        }
      },
      "FolderDescription": {
        "properties": {
          "path": {
            "type": "string",
            "required": true,
            "description": "The folder path"
          },
          "description": {
            "type": "string",
            "example": "This is a description",
            "required": true,
            "description": "The description of the folder"
          }
        }
      },
      "PDF": {
        "properties": {
          "name": {
            "type": "string",
            "required": true,
            "description": "The name of the pdf"
          }
        }
      },
      "LearningObjectStats": {
        "properties": {
          "downloads": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of object downloads"
          },
          "saves": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of object library saves"
          },
          "review": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of in review objects"
          },
          "total": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The total number of objects"
          },
          "released": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of released objects"
          },
          "lengths": {
            "type": "object",
            "$ref": "#/components/schemas/LearningObjectStatsLength"
          },
          "blooms_distribution": {
            "type": "object",
            "$ref": "#/components/schemas/LearningObjectStatsBloom"
          },
          "status": {
            "type": "object",
            "$ref": "#/components/schemas/LearningObjectStatsStatus"
          },
          "collections": {
            "type": "object",
            "$ref": "#/components/schemas/LearningObjectStatsCollections"
          }
        }
      },
      "LearningObjectStatsCollections": {
        "properties": {
          "numbers": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of collections"
          }
        }
      },
      "LearningObjectStatsStatus": {
        "properties": {
          "waiting": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of in waiting objects"
          },
          "peerReview": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of in review objects"
          },
          "proofing": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of in proofing objects"
          }
        }
      },
      "LearningObjectStatsBloom": {
        "properties": {
          "apply": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of apply typed outcomes"
          },
          "evaluate": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of evaluate typed outcomes"
          },
          "remember": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of remember typed outcomes"
          }
        }
      },
      "LearningObjectStatsLength": {
        "properties": {
          "nanomodule": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of nanomodule length objects"
          },
          "micromodule": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of micromodule length objects"
          },
          "module": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of module length objects"
          },
          "unit": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of unit length objects"
          },
          "course": {
            "type": "number",
            "example": 100,
            "required": true,
            "description": "The number of course length objects"
          }
        }
      },
      "Outcome": {
        "properties": {
          "id": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The id of the outcome"
          },
          "bloom": {
            "type": "string",
            "example": "Remember",
            "required": true,
            "description": "The outcome's bloom type"
          },
          "verb": {
            "type": "string",
            "example": "Classify",
            "required": true,
            "description": "The outcome's verb"
          },
          "text": {
            "type": "string",
            "example": "that you can't divide by 0",
            "required": true,
            "description": "The outcome's text"
          },
          "mappings": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/StandardOutcome" }
          }
        }
      },
      "StandardOutcome": {
        "properties": {
          "id": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The id of the standard outcome"
          },
          "author": {
            "type": "string",
            "example": "CS2013",
            "required": true,
            "description": "The organization who created the outcome"
          },
          "source": {
            "type": "string",
            "example": "CS2013",
            "required": true,
            "description": "The shortened organization who created the outcome"
          },
          "name": {
            "type": "string",
            "example": "Algorithmic Strategies",
            "required": true,
            "description": "The type of the outcome"
          },
          "date": {
            "type": "string",
            "example": 2013,
            "required": true,
            "description": "The year the outcome was made"
          },
          "outcome": {
            "type": "string",
            "example": "This is a outcome",
            "required": true,
            "description": "The outcome text"
          }
        }
      },
      "Topic": {
        "properties": {
          "id": {
            "type": "string",
            "example": 0,
            "required": true,
            "description": "The id of the standard outcome"
          },
          "name": {
            "type": "string",
            "example": "Algorithmic Strategies",
            "required": true,
            "description": "The type of the outcome"
          }
        }
      },
      "Metric": {
        "required": ["collection", "metrics"],
        "properties": {
          "collection": {
            "type": "string",
            "description": "The collection pulling metrics from",
            "example": "learning-objects"
          },
          "metrics": {
            "type": "object",
            "description": "The metrics",
            "$ref": "#/components/schemas/MetricBody"
          }
        }
      },
      "MetricBody": {
        "required": ["saves", "downloads"],
        "properties": {
          "saves": {
            "type": "integer",
            "description": "The number of saves for a particular collection",
            "example": 200
          },
          "downloads": {
            "type": "integer",
            "description": "The number of downloads for a particular collection",
            "example": 100
          },
          "topDownloads": {
            "type": "array",
            "description": "The top downloads of a particular collection",
            "items": { "$ref": "#/components/schemas/Download" }
          }
        }
      },
      "LibraryItem": {
        "properties": {
          "savedOn": {
            "type": "string",
            "description": "When the object was saved to the user's library",
            "example": 0,
            "required": true
          },
          "savedBy": {
            "type": "string",
            "description": "The username of the user who saved the object",
            "example": "jdoe1",
            "required": true
          },
          "learningObject": {
            "type": "object",
            "description": "The learning object saved to the library",
            "$ref": "#/components/schemas/LearningObject"
          }
        }
      },
      "Notification": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the notification",
            "example": 0,
            "required": true
          },
          "text": {
            "type": "string",
            "description": "The description of the notification",
            "example": "This is an example",
            "required": true
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp for when the notification was created",
            "example": 0,
            "required": true
          },
          "link": {
            "type": "string",
            "description": "The link to the object",
            "example": "https://clark.center/details/jdoe1/00000000-1111-2222-3333-444444444444",
            "required": true
          },
          "attributes": {
            "type": "object",
            "required": true,
            "additionalProperties": { "type": "string" }
          }
        }
      },
      "NotificationPayload": {
        "properties": {
          "username": {
            "type": "string",
            "description": "The requester's username",
            "example": "jdoe1",
            "required": true
          },
          "author": {
            "type": "string",
            "description": "The learning object author's username",
            "example": "jdoe1",
            "required": true
          },
          "learningObjectName": {
            "type": "string",
            "description": "The name of the learning object updated",
            "example": "This is a learning object",
            "required": true
          },
          "version": {
            "type": "number",
            "description": "The version number of the object",
            "example": 0,
            "required": true
          },
          "cuid": {
            "type": "string",
            "required": true,
            "description": "The cuid of the learning object",
            "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
          },
          "authorID": {
            "type": "string",
            "required": true,
            "description": "The learning object author's id",
            "example": 0
          }
        }
      },
      "Rating": {
        "properties": {
          "_id": {
            "type": "string",
            "description": "The id of the rating object",
            "example": 0,
            "required": true
          },
          "value": {
            "type": "number",
            "description": "The rating value, an integer, out of 5",
            "example": 4,
            "required": true
          },
          "user": {
            "type": "object",
            "description": "The user who left the rating",
            "$ref": "#/components/schemas/RatingUser",
            "required": false
          },
          "comment": {
            "type": "string",
            "description": "The comment the person made on the rating",
            "example": "This is an example comment",
            "required": true
          },
          "date": {
            "type": "number",
            "description": "The date the person created the rating",
            "example": 0,
            "required": true
          },
          "response": {
            "type": "array",
            "description": "An array of potential responses to the rating",
            "items": { "$ref": "#/components/schemas/Response" },
            "required": false
          },
          "source": {
            "type": "object",
            "description": "The learning object source information",
            "$ref": "#/components/schemas/RatingSource",
            "required": false
          }
        }
      },
      "Response": {
        "properties": {
          "_id": {
            "type": "string",
            "description": "The id of the response object",
            "example": 0,
            "required": true
          },
          "user": {
            "type": "object",
            "description": "The user who left the response",
            "$ref": "#/components/schemas/RatingUser",
            "required": true
          },
          "comment": {
            "type": "string",
            "description": "The comment the person made on the response",
            "example": "This is an example comment",
            "required": true
          },
          "date": {
            "type": "number",
            "description": "The date the person created the response",
            "example": 0,
            "required": true
          },
          "source": {
            "type": "object",
            "description": "The learning object source information",
            "$ref": "#/components/schemas/RatingSource"
          }
        }
      },
      "Flag": {
        "properties": {
          "_id": {
            "type": "string",
            "description": "The id of the flag",
            "example": 0,
            "required": true
          },
          "comment": {
            "type": "string",
            "description": "The comment for why the rating was flagged",
            "example": "This is a flagged rating",
            "required": true
          },
          "ratingId": {
            "type": "string",
            "description": "The id of the rating flagged",
            "example": 0,
            "required": true
          },
          "date": {
            "type": "number",
            "description": "The time when the rating was flagged",
            "example": 0,
            "required": true
          },
          "username": {
            "type": "string",
            "description": "The username of the person who flagged the rating",
            "example": "jdoe1",
            "required": true
          },
          "concern": {
            "type": "string",
            "description": "The type of the flag",
            "example": "Other",
            "required": true
          }
        }
      },
      "RatingUser": {
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the person who left the rating",
            "example": "jdoe1",
            "required": true
          },
          "name": {
            "type": "string",
            "description": "The name of the person who left the rating",
            "example": "John Doe",
            "required": true
          },
          "email": {
            "type": "string",
            "description": "The email of the person who left the rating",
            "example": "jdoe1@gmail.com",
            "required": true
          }
        }
      },
      "RatingSource": {
        "properties": {
          "cuid": {
            "type": "string",
            "description": "The cuid of the object",
            "example": "00000000-1111-2222-3333-444444444444",
            "required": true
          },
          "version": {
            "type": "number",
            "description": "The version of the object",
            "example": 1,
            "required": true
          }
        }
      },
      "FrameworkDocument": {
        "properties": {
          "_id": {
            "type": "string",
            "required": true,
            "description": "the id of the framework in the database",
            "example": "611a818a80000000000024e9"
          },
          "name": {
            "type": "string",
            "required": true,
            "description": "The name of the framework",
            "example": "Some Framework"
          },
          "author": {
            "type": "string",
            "required": true,
            "description": "The author of the of the framework",
            "example": "Some Author"
          },
          "source": {
            "type": "string",
            "required": true,
            "description": "The source of the framework",
            "example": "Some Source"
          },
          "description": {
            "type": "string",
            "required": true,
            "description": "The description of the framework",
            "example": "Some Description"
          }
        }
      },
      "Guideline": {
        "properties": {
          "_id": {
            "type": "string",
            "required": true,
            "description": "the id of the framework in the database",
            "example": "611a818a80000000000024e9"
          },
          "name": {
            "type": "string",
            "required": true,
            "description": "The name of the framework",
            "example": "Some Framework"
          },
          "levels": {
            "type": "array",
            "required": true,
            "description": "The level the guideline applies to",
            "example": ["high"]
          },
          "year": {
            "type": "string",
            "required": true,
            "description": "The year that the guideline applies to",
            "example": 2021
          },
          "frameworkId": {
            "type": "ObjectId",
            "required": true,
            "description": "The framework id that the guideline is associated to",
            "example": "ObjectId(\"60d0dc0192019201f5e74716\")"
          },
          "guideline": {
            "type": "string",
            "required": true,
            "description": "The description of the guideline",
            "example": "Some Description"
          }
        }
      },
      "SearchItemDocument": {
        "properties": {
          "_id": {
            "type": "string",
            "required": true,
            "description": "the id of the framework in the database",
            "example": "611a818a80000000000024e9"
          },
          "levels": {
            "type": "array",
            "required": true,
            "description": "The level the guideline applies to",
            "example": ["high"]
          },
          "year": {
            "type": "string",
            "required": true,
            "description": "The year that the guideline applies to",
            "example": 2021
          },
          "frameworkName": {
            "type": "string",
            "required": true,
            "description": "The name of the framework",
            "example": "Some Framework"
          },
          "author": {
            "type": "string",
            "required": true,
            "description": "The author of the of the framework",
            "example": "Some Author"
          },
          "frameworkDescription": {
            "type": "string",
            "required": true,
            "description": "The description of the framework",
            "example": "Some Description"
          },
          "guidelineName": {
            "type": "string",
            "required": true,
            "description": "The name of the framework",
            "example": "Some Framework"
          },
          "guidelineDescription": {
            "type": "string",
            "required": true,
            "description": "The description of the guideline",
            "example": "Some Description"
          }
        }
      },
      "FrameworkSearchResults": {
        "properties": {
          "total": {
            "type": "number",
            "example": 200,
            "required": true,
            "description": "The total number of framework documents"
          },
          "results": {
            "type": "array",
            "required": true,
            "description": "The array of framework documents",
            "items": { "$ref": "#/components/schemas/FrameworkDocument" }
          }
        }
      },
      "SearchResults": {
        "properties": {
          "total": {
            "type": "number",
            "example": 200,
            "required": true,
            "description": "The total number of framework documents"
          },
          "results": {
            "type": "array",
            "required": true,
            "description": "The array of Search Item Documents",
            "items": { "$ref": "#/components/schemas/SearchItemDocument" }
          }
        }
      },
      "UserBody": {
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "jdoe1@gmail.com",
            "required": true
          },
          "password": {
            "type": "string",
            "description": "The password of the user",
            "example": "M0ckPa$$word",
            "required": true
          },
          "username": {
            "type": "string",
            "description": "The username of the user",
            "example": "jdoe1",
            "required": true
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe",
            "required": true
          },
          "organization": {
            "type": "string",
            "description": "The name of the organization the user belongs to",
            "example": "Towson University",
            "required": true
          },
          "bio": {
            "type": "string",
            "description": "The bio of the user",
            "example": "This is a bio",
            "required": true
          }
        }
      },
      "Organization": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the organization",
            "example": 0,
            "required": true
          },
          "institution": {
            "type": "string",
            "description": "The name of the organization",
            "example": "Towson University",
            "required": true
          }
        }
      },
      "MailTemplate": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the sendgrid template",
            "required": true
          },
          "templateVariables": {
            "type": "object",
            "description": "The data for the template to use"
          }
        }
      },
      "Downtime": {
        "properties": {
          "isDown": {
            "type": "boolean",
            "description": "a boolean that denotes the status for the downtime",
            "example": true,
            "required": true
          }
        }
      },
      "Outage": {
        "properties": {
          "_id": {
            "type": "ObjectId",
            "description": "identifer used by mongo to find document",
            "example": "ObjectId()",
            "required": true
          },
          "name": {
            "type": "String",
            "description": "name of outage",
            "example": "downloads",
            "required": true
          },
          "accessGroups": {
            "type": "array",
            "items": { "type": "string", "example": "editor" },
            "required": true
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Should return a status code of OK when downloading waiting objects as a reviewer in their collection"
            },
            "required": true
          },
          "discovered": {
            "type": "time",
            "description": "timestamp of when outage occured",
            "example": "2020-02-19T20:31:33.852Z",
            "required": true
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "https://api-gateway.clark.center/users/skaza/learning-objects/5aa0013becba9a264dcd8030/bundle"
            },
            "description": "links affiliated with the outage"
          },
          "resolved": {
            "type": "time",
            "description": "timestamp of when outage occured",
            "example": "2020-02-19T20:45:38.335Z",
            "required": true
          }
        }
      },
      "Blog": {
        "properties": {
          "_id": {
            "type": "ObjectId",
            "description": "identifier used by mongo to find document",
            "example": "ObjectId()",
            "required": true
          },
          "name": {
            "type": "string",
            "description": "name of blog",
            "example": "CLARK and CARD SSO",
            "required": true
          },
          "description": {
            "type": "string",
            "description": "description of blog",
            "example": "CLARK and CARD Single-Sign-On has now been deployed and ready for use!",
            "required": true
          },
          "timestamp": {
            "type": "Date",
            "description": "the publish date of the blog",
            "example": "2022-09-07T00:00:00.000Z",
            "required": true
          },
          "url": {
            "type": "string",
            "description": "the URL of the blog",
            "example": "N/A",
            "required": true
          }
        }
      }
    }
  },
  "tags": []
}
