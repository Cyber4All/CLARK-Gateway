import { Server } from 'socket.io';

export class SocketInteractor {
    private static instance: SocketInteractor;
    private connectedUsers: Map<string, string> = new Map();
    private server: Server;

    // singleton class so private constructor
    private constructor(server: Server) {
        this.server = server;
    }

    // get instance of SocketInteractor
    static init(server?: Server): SocketInteractor {
        if (!this.instance && server) {
            this.instance = new SocketInteractor(server);
        } else if (!this.instance) {
            throw Error('You must initialize this singleton class with a Socket.io Server!');
        }

        return this.instance;
    }

    /**
     * Takes a username and a client ID and maps them together
     * @param username username of the connected user
     * @param clientID client ID generated by socket.io of the connected user
     */
    connectUser(username: string, clientID: string): void {
        if (!this.connectedUsers.has(username)) {
            this.connectedUsers.set(username, clientID);
            console.log(username + ' connected!');
        }
    }

    /**
     * Takes a client ID, iterates through the map of connected users and removes the corresponding link entry
     * @param clientID client ID generated by socket.io
     */
    disconnectClient(clientID:  string): void {
        if (this.connectedUsers.size) {
            this.connectedUsers.forEach((v, k) => {
                if (v === clientID) {
                    this.connectedUsers.delete(k);
                    console.log(k + ' disconnected!');
                }
            });
        }
    }

    /**
     * Takes a username/list of usernames and emits a message to them
     * @param users Either an array of usernames or a single username to which to send a message
     * @param message String message
     */
    sendMessage(users: Array<string> | string, message: string) {
        const namespace = this.server.of('/');

        if (!Array.isArray(users)) {
            users = [users];
        }

        for (let i = 0; i < users.length; i++) {
            let socket = namespace.connected[this.connectedUsers.get(users[i])];
            if (socket) {
                socket.emit('message', message);
            }
        }
    }
}
